// LAYOUT

@mixin clearfix {
    &::after {
        content: "";
        display: block;
        height: 0;
        clear: both;
    }
}

@mixin section-skew-bottom {
    @each $point, $height in $skew {
        @include respond($point) {
            clip-path: polygon(0 0, 100% 0, 100% calc(100% - #{$height}), 0 100%);
        }
    }
}

@mixin section-skew-both {
    @each $point, $height in $skew {
        @include respond($point) {
            clip-path: polygon(0 $height, 100% 0, 100% calc(100% - #{$height}), 0 100%);
        }
    }
}

@mixin section-under-skewed {
    @each $point, $height in $skew {
        @include respond($point) {
            margin-top: -($height);
            padding-top: $height;

            & > *:first-child {
                margin-top: calc(#{$height} * 0.4);
            }
        }
    }
}

@mixin section-over-skewed {
    @each $point, $height in $skew {
        @include respond($point) {
            margin-bottom: -($height);
            padding-bottom: $height;

            & > *:last-child {
                margin-bottom: calc(#{$height} * 0.4);
            }
        }
    }
}

@mixin section-straight {
    @each $point, $padding in $section-pad {
        @include respond($point) {
            padding: $padding 0;
        }
    }
}

// STYLES

@mixin button-raise {
    &:hover {
        transform: translateY(-.3rem);
        box-shadow: 0 1rem 2rem rgba($color-black, .2);
    }

    &:active {
        transform: translateY(-.1rem);
        box-shadow: 0 .5rem 1rem rgba($color-black, .3);
    }

    // Raised by defult on touch devices    
    @media (hover: none) {
        transform: translateY(-.3rem);
        box-shadow: 0 1rem 2rem rgba($color-black, .2);
    }
}

// TYPOGRAPHY

// Letter spacing displaces the text from the centered position
// Indenting by the amount of spacing compensates for the displacement 
@mixin centered-spacing ($units) {
    letter-spacing: $units;
    text-indent: $units;
}

// MEDIA QUERIES
/*
Breakpoint values: 
0 - 400 px: small phone
401 - 600: phone
601 - 900: tablet portrait
901 - 1200: tablet landscape
901 - 1800: desktop (default)
1801 - ...: large desktop  

$breakpoint argument choices:
- small-phone
- phone
- tab-port
- tab-land
- desktop
- big-desktop
*/

@mixin respond($breakpoint) {
    // Breakpoints in ems, as rems in media queries refer to the browser default
    // See https://stackoverflow.com/questions/47409585/using-rem-units-in-media-queries-and-as-width 
    // If the user-defined font is already larger than 16px,
    // it should increase at a later breakpoint
    @if $breakpoint == big-desktop {
        @media (min-width: 112.5em) {@content}
    }
    @else if $breakpoint == desktop {
        @media (min-width: 56.25em) {@content}
    }
    @else if $breakpoint == tab-land {
        @media (max-width: 75em) {@content}
    }
    @else if $breakpoint == tab-port {
        @media (max-width: 56.25em) {@content}
    }
    @else if $breakpoint == phone {
        @media (max-width: 37.5em) {@content}
    }
    @else if $breakpoint == small-phone {
        @media (max-width: 25em) {@content}
    }
}

